tosca_definitions_version: tosca_simple_yaml_1_3
description: A TOSCA template to implement the connectivity service required between an EV Charging Station and a Charging Station Management System as part of 5G Riders on the Storm 2020 Catalyst for TMForum

metadata:
  # The following fields are "normative" and expected in TOSCA 
  template_name: CS to CSMS connectivity
  template_author: paul.m.jordan@bt.com
  template_version: '3.0'

imports:
  # - https://github.com/pmjordan/TOSCA_for_TMForum/blob/master/sid.yml
  # would normally refer to external repository but for now make it local
  - file: ../../../../TOSCA_for_TMForum/sid.yml
  # The content is a TOSCA encoding of selected SID information model entities as explained in IG1176
    namespace_prefix: sid

# This file is built on the following assumptions:
# A wireless connection is created by the 5G network in the admin down state and changed by the network to admin up when a connection request is made by a SIM. 
#     i.e. standard behavior which does not need to modelled in this TOSCA template
# The change over from fixed connection to a wireless connection is under control of the charging station.
# One slice is used for all wireless connections
# The slice will be allocated additional resources by the CSP in anticipation of a storm or other at-risk event
# The additional resources are provided only for some sub-set of the charging stations
# The sub-set of affected charing stations may change over time

data_types:
  sliceQoSType:
    derived_from: string
    constraints:
      - equal: [embb,urllc,mmtc]

capability_types:
# define the different capabilities a slice may have
  sliceType:
    description: >-
      The slice type name given to some mix of speed, latency etc. 
    derived_from: tosca.capabilities.Root

  sliceType_embb:
    description: enhanced Mobile Broadband (eMBB) provides higher speeds for applications such as web browsing, streaming and video conferencing
    derived_from: sliceType

  sliceType_urllc:
    description: Ultra-reliable and Low-latency communications (URLLC) enables mission-critical applications, industrial automation, new medical applications, and autonomous driving that require very short network traversal time; and
    derived_from: sliceType
  
  sliceType_mmtc:
    description: massive Machine Type Communications (mMTC) extends LTE (Long Term Evolution) IoT (Internet of Things) capabilities to support a huge number of devices with enhanced coverage and long battery life.
    derived_from: sliceType

interface_types:
  wireless_state_management:
    description: This interface is used to control the admin state of a wireless connection
    notifications:
      wireless_up_request:
        description: This notification is received when the CS uses its SIM to request a connection over 5G
        implementation: name_of_command_or_script_which_orchestrator_uses_to_subscribe_to_this_notification 
        # The action taken is defined in a policy with the same name


# Define Node Types, one each for fixed and slice
node_types:
  CS_CSMS_connection:
    description: assured connection using combination of fixed and wireless
    derived_from: sid:nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.LogicalResource.ResourceFunction
    capabilities:
      # There are always two external interfaces
      a_end: Endpoint 
      z-end: Endpoint


  fixed_connection:
    # TODO define lifecycle so that it gets created straight away
    description: connection between two endpoints over a fixed connection
    derived_from: sid:nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.LogicalResource.ResourceFunction
    capabilities:
      # There are always two interfaces
      a_end: Endpoint 
      z-end: Endpoint

  wireless_connection:
    description: connection between two endpoints over a wireless connection
    derived_from: sid:nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.LogicalResource.ResourceFunction
    requirements:
      # state the resources needed to make the connection over a slice. A slice will need to be created if it doesn't exist
      - slice:
          # we only want to specify node type but syntax demands capability as well
          capability: sliceType
          node: 5G_slice
          relationship: DependsOn
    capabilities:
      # There are always two interfaces
      a_end: Endpoint 
      z-end: Endpoint
    interfaces:
      wireless_connection_state_management:
        type: wireless_state_management

  5G_slice:
    description: An abstract class for a network capable of supporting multiple point to point connection at a given qos
    derived_from: sid:nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource
    properties:
      sliceQoSType: 
        type: string
        required: false

  5G_embb_slice:
    description: A concrete class for a slice for enhanced Mobile Broadband
    derived_from: 5G_slice
    properties:
      sliceQoSType: 
        constraints:
          - equal: embb
      # TODO some extra properties to reflect the content of GST
    capabilities:
      SliceType: sliceType_embb
      

policy_types:
  tosca.policies.Placement.Colocate:
  # This type is used in TOSCA spec examples but not defined. Using string type is imprecise.
    derived_from: tosca.policies.Placement
    properties:
      affinity:
        type: string
    targets:
      - 5G_slice

topology_template:

  node_templates:
    my_CS_CSMS_connection:
      type: CS_CSMS_connection
      # Every CS-CSMS connection requires an instance of a fixed connection
      requirements:
        - dependency: my_fixed_connection

    my_fixed_connection:
      type: fixed_connection

    my_wireless_connection:
      type: wireless_connection
      requirements:
        - slice: cs_csms_slice
            # the commented out syntax is uses the target node_filter method; not the abstract node template method
            # node_filter:
            #   properties:
            #     sliceQoSType:
            #       - { equal: embb }


    cs_csms_slice:
      type: 5G_embb_slice
      # this uses the abstract node template method
      # Abstract node template (placeholder) to be selected by provider
      directives: [ select ]

  policies:
    # TOSCA 1.3 section 3.9.2.6.1 defines polices within a topology template as a list of policy definitions but as a workaround to puccini issue #30 they are defined here as a map 
    wireless_connection_event_handler:
      # due to puccini issue #29 can't define and hence use tosca.policies.wireless_up_request so have to use a generic policy type
      #type: tosca.policies.wireless_up_request
      type: tosca.policies.Root
      description: Policy to define what workflow to run when a wireless_up_request notification is received
      # This policy only applies to wireless connections so say so by defining the targets. Not strictly necessary here as the notification is defined in a interface which is only used on wireless connections
      # But can't do so due as there is no targets clause in our parent while we have the workaround to puccini issue #30
      # targets
        # - my_wireless_connection
      # puccini does not yet support triggers so have to comment them out until issue #29 fixed
      # triggers:
      #   wireless_up_request_trigger:
      #     event: wireless_up_request
      #     action:
      #       # Can't use set_state and the node type is not derived from tosca.nodes
      #       - delegate: wireless_connection_activate
      #       # but there is less indirection if we say that the action sets the state directly like this
      #       - set_state: 
      # TODO run workflow wireless_connection_provide
    #wireless_connection_clear
      # TODO run wireless_connection_cease
    #connection_at_risk:
      # TODO run workflow for add_resource
    #connection_not_at_risk
      # TODO run workflow for remove_resource
    wireless_connection_affinity:
      # make all wireless connections use the same slice
      type: tosca.policies.Placement.Colocate
      description: Keep all instances of my_wireless_connection on one instance of cs_csms_slice
      properties:
        affinity: cs_csms_slice

  workflows:
    wireless_connection_activate:
      description: Change the admin state of a wireless connection which has already been created
      steps:
        target: my_wireless_connection
        # TODO create wireless connection
      #wireless_connection_cease:
        # TODO cease wireless connection
        # TODO if slice exists AND there are no connections on it then destroy it
      #add_resource
        # TODO
      #remove_resource
        # TODO



